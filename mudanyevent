#!/usr/bin/env perl
# vim: set filetype=perl :
use strict;
use warnings;

use lib './lib';

use EV;
use AnyEvent;
use AnyEvent::Socket;
use AnyEvent::Handle;
use Time::HiRes qw/tv_interval gettimeofday time/;

my $quit_program = AnyEvent->condvar;

my $nclients = 0;
my %clients;

my %stats = (
    recv_bytes => 0,
    sent_bytes => 0,
);

my $BANNER = <<'END';
In many MUDs commands are parsed and executed in a first-come first-served
fashion: if the character is currently performing an action which delays
(casting a spelli for example), any other command (including non-delaying
ones such as SCORE) need to wait for the first command to be executed.
In other mode modern MUDs there may be multiple command queues which allow
the player to perform delaying actions which don't overlap with each
other. For example, using an attack prevents the player from attacking
again before N seconds, but meanwhile the player can still ready a
defensive command or see their statistics.  Anacronia V4 implements a
queue system in which all the unknown commands are weeded out of the
command queue, and commands are executed in order of priority. Adding
specific queue types (attack, defense, movement) is on the roadmap and
should be fairly easy to implement.

END

tcp_server(
    undef, 8081,
    \&accept_cb,
    sub {
        my ( $fh, $thishost, $thisport ) = @_;
        warn "Listening on $thishost:$thisport\n";
        warn "\n\nUSE CTRL+C TO STOP THIS MUD\n\n";
    }
);

my $t0 = [gettimeofday];
my $w  = AnyEvent->signal(
    signal => "INT",
    cb     => sub {
        $quit_program->send('SIGINT');
    }
);

my $commands_handled = 0;
my $tick_commands    = AnyEvent->timer(
    after    => 1.0,
    interval => 0.05,
    cb       => sub {
        return unless keys %clients;
        my @deletion;
        my $is_shutdown = 0;
        for ( keys %clients ) {
            my $handle = $clients{$_}->{handle};

            #$handle->push_write("\nTICK!\n");
            #$stats{sent_bytes}+=length("\nTICK!\n");
            next if !@{ $clients{$_}->{lines} };
            if ( @{ $clients{$_}->{lines} } > 50 ) {
                push @deletion, $_;
                next;
            }
            my $line = shift @{ $clients{$_}->{lines} };

            #print "Client $_ got line $line\n";
            if ( $line =~ /\@shutdown/ ) {
                $is_shutdown = "Client $_";
                $handle->push_write("Shutting down\n");
                $stats{sent_bytes} += length "Shutting down\n";
                $commands_handled++;
                last;
            }
            if ( $line =~ /\@queues/ ) {
                $handle->push_write($BANNER);
                $stats{sent_bytes} += length $BANNER;
                $handle->push_write("\n\nQUEUES:\n");
                $stats{sent_bytes} += length "\n\nQUEUES:\n";
                for my $c ( sort keys %clients ) {
                    my $line = sprintf( "%-10s - %d\n", $c, scalar @{ $clients{$c}->{lines} } );
                    $handle->push_write($line);
                    $stats{sent_bytes} += length $line;
                }
                $commands_handled++;
                next;
            }
            ## print "($curr_client) Got: [", join(' ',map { sprintf("(%c(%d))",$_>=32&&$_<=126?$_:126,$_) } unpack('C*',$_[0]->rbuf)), "]\n";
            $handle->push_write($line);
            $stats{sent_bytes} += length $line;
            $handle->push_write( $BANNER . $BANNER . $BANNER . $BANNER );
            $stats{sent_bytes} += length( $BANNER . $BANNER . $BANNER . $BANNER );
            my $prompt = "xxxx (delay 0.0)>\r\n";
            $handle->push_write($prompt);
            $stats{sent_bytes} += length $prompt;
            $commands_handled++;
        }
        if ($is_shutdown) {
            my $msg = "\n\nMUD SHUTTING DOWN - by $is_shutdown\n\n";
            for ( keys %clients ) {
                $clients{$_}->{handle}->push_write($msg);
                $stats{sent_bytes} += length $msg;
            }
            $quit_program->send($is_shutdown);
        }
        for (@deletion) {
            warn "Client $_ spamming\n";
            my $handle = $clients{$_}->{handle};
            delete $clients{$_};
            $handle->destroy;    # destroy handle
        }
    },
);

my $shutdown_by = $quit_program->recv;
my $secs = tv_interval( $t0, [gettimeofday] );
print "\n\nShut down by $shutdown_by\n";
printf( "Received %-20s bytes - %-15s bytes/sec\n", $stats{recv_bytes}, sprintf( "%05.3f", $stats{recv_bytes} / $secs ) );
printf(
    "Sent     %-20s bytes - %-15s bytes/sec - %-10s KiB/sec - %-10s MiB/sec\n",
    $stats{sent_bytes},
    sprintf( "%05.3f", $stats{sent_bytes} / $secs ),
    sprintf( "%05.3f", $stats{sent_bytes} / 1024 / $secs ),
    sprintf( "%05.3f", $stats{sent_bytes} / 1024 / 1024 / $secs ),
);
print "Total run time: $secs seconds\n";
printf( "Handled %s commands in %s seconds: %.03f commands/second\n", $commands_handled, $secs, $commands_handled / $secs );

sub accept_cb {
    my ( $fh, $host, $port ) = @_;
    my $curr_client = $nclients;
    warn "Connection from $host:$port ($curr_client)\n";
    my $handle;
    $handle = new AnyEvent::Handle(
        fh       => $fh,
        on_error => sub {
            warn "Error $_[2]";
            $_[0]->destroy();
        },
        on_eof => sub {
            warn "Goodbye client $curr_client\n";
            delete $clients{$curr_client};
            $handle->destroy;    # destroy handle
        },
    );
    $clients{$curr_client}{handle} = $handle;
    $clients{$curr_client}{lines}  = [];

    $handle->push_write("Hi, Welcome to the MUD!\r\n\r\n");    # FIXME BANNER

    $handle->on_read(
        sub {
            $stats{recv_bytes} += length $_[0]->rbuf;

            # TODO munge data

            # line has been received
            push @{ $clients{$curr_client}{lines} }, $_[0]->rbuf;

            # clear input buffer - TODO partials
            $_[0]->rbuf = '';
        }
    );
    $nclients++;
    ();
}
